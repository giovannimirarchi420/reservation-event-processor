name: Build, Push and Deploy

on:
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Install xmllint (part of libxml2-utils)
      - name: Install xmllint
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils

      # Step 2: Checkout the source code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 3: Read the version from the pom.xml file
      - name: Extract version from pom.xml
        id: extract_version
        run: |
          VERSION=$(xmllint --xpath "//*[local-name()='project']/*[local-name()='version']/text()" pom.xml)
          echo "VERSION=$VERSION"
          echo "version=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # Step 4: Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # DockerHub username stored as a secret
          password: ${{ secrets.DOCKER_PASSWORD }} # DockerHub password stored as a secret

      # Step 5: Build and push Docker image for DB_TYPE=postgres
      - name: Build and push Docker image (Postgres)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/reservation-event-processor:${{ env.version }}-postgres
          build-args: |
            DB_TYPE=postgres

      # Step 6: Build and push Docker image for DB_TYPE=oracle
      - name: Build and push Docker image (Oracle)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/reservation-event-processor:${{ env.version }}-oracle
          build-args: |
            DB_TYPE=oracle

      # Step 7 (Optional): Log out of DockerHub
      - name: Log out of DockerHub
        run: docker logout

      # Step 8: Update Helm Chart
      - name: Checkout Helm chart repository
        uses: actions/checkout@v4
        with:
          repository: giovannimirarchi420/reservation-helm-chart
          token: ${{ secrets.CHART_REPO_TOKEN }}
          path: helm-chart-repo

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Update event processor image tag in values.yaml
        run: |
          cd helm-chart-repo
          
          # Get current tag value
          CURRENT_TAG=$(yq eval ".eventProcessor.image.tag" values.yaml)
          echo "Current Event Processor tag: ${CURRENT_TAG}"
          
          # Extract database type suffix if it exists (e.g., -postgres, -oracle)
          if [[ "$CURRENT_TAG" =~ -([a-zA-Z]+)$ ]]; then
            DB_SUFFIX="-${BASH_REMATCH[1]}"
            echo "Detected database suffix: ${DB_SUFFIX}"
          else
            # If no suffix is found, assume postgres as default
            DB_SUFFIX="-postgres"
            echo "No database suffix detected, using default: ${DB_SUFFIX}"
          fi
          
          # Create new tag with version and preserved database type
          NEW_TAG="${{ env.version }}${DB_SUFFIX}"
          echo "New Event Processor tag: ${NEW_TAG}"
          
          # Update the tag in values.yaml
          yq eval ".eventProcessor.image.tag = \"${NEW_TAG}\"" -i values.yaml
          
          # Verify the update
          UPDATED_TAG=$(yq eval ".eventProcessor.image.tag" values.yaml)
          echo "Updated Event Processor tag: ${UPDATED_TAG}"

      - name: Commit and push Helm chart changes
        run: |
          cd helm-chart-repo
          
          # Check if there are changes
          if git diff --quiet; then
            echo "No changes detected in values.yaml"
            exit 0
          fi
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add and commit changes
          git add values.yaml
          git commit -m "chore: update Event Processor image tag to ${NEW_TAG}"
          
          # Push changes
          git push
